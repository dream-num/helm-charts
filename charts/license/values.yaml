# Default values for license.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global: 
  istioDefaultRevision: default

replicaCount: 1

image:
  registry: univer-acr-registry.cn-shenzhen.cr.aliyuncs.com
  repository: univer/universer-license
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest" # VERSION

imagePullSecrets:
  - name: regcred
nameOverride: ""
fullnameOverride: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  http: 8001

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

config:
  database:
    maxOpenConns: 100
    maxIdleConns: 10
    # minutes
    connMaxLifetime: 60
    driver: postgresql
    host: postgresql
    port: 5432
    dbname: univer
    username: postgres
    password: postgres
  redis:
    addr: redis:6379
  admin: []
  s3:
    accessKeyID: ""
    accessKeySecret: ""
    region: oss-cn-shenzhen
    endpoint: https://oss-cn-shenzhen.aliyuncs.com
    endpointPublic: https://oss-cn-shenzhen.aliyuncs.com
    usePathStyle: false
    presignExpires: 3600s
    defaultBucket: univer
  auth:
    enabled: false
    univerEnabled: false
    oidc:
      enabled: false
      issuer: https://accounts.google.com
      clientID: "xxxx"
      clientSecret: "xxxxxxxxxx"
      redirectURL: "http://example.com/oidc/callback"
      cookieDomain: "abc.example.com"
    oauth2:
      enabled: false
      clientID: "xxxx"
      clientSecret: "xxxxxxxxxx"
      redirectURL: "http://example.com/oauth2/callback"
      cookieDomain: "abc.example.com"
      authURL: "http://localhost:8081/oauth/authorize"
      tokenURL: "http://localhost:8081/oauth/token"
      apiURL: "http://localhost:8081/oauth/userinfo"
      scopes: "all"
      openidPath: "id"
      emailPath: "email"
      namePath: "name"
      avatarPath: "avatar"
    anonymous:
      enabled: false
      cookieDomain: "abc.example.com"
    permission:
      enabled: false
  apiLimit:
    method:
      tokens: 600
      interval: 30s
    ip: {}
    perMethod: {}
  sentryConfig:
    dsn: "https://sentry.io/"
  usip:
    enabled: false
    uri:
      userInfo: "http://usip:8080/userinfo"
      collaborators: "http://usip:8080/collaborators"
      role: "http://usip:8080/role"
      credential: "http://usip:8080/credential"

license:
  LICENSE: ""
  publicKey: ""

istio:
  enabled: true
  
  gateway:
    enabled: true
    host: staging.univer.plus

    # select istio ingress gateway. for example
    # ingressSelector:
    #   istio: ingressgateway
    ingressSelector: {"istio":"ingress"}

    tls:
      enabled: true
      credentialName: "staging-host-credential"
  
  featureGateway:
    enabled: true
    host: dev.univer.plus

    # select istio ingress gateway. for example
    # ingressSelector:
    #   istio: ingressgateway
    ingressSelector: {"istio":"ingress"}

    tls:
      enabled: true
      credentialName: "dev-host-credential"