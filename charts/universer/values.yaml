# Default values for universer.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global: 
  istioDefaultRevision: default

replicaCount: 1

image:
  registry: univer-acr-registry.cn-shenzhen.cr.aliyuncs.com
  repository: release/universer
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: 0.2.15 # VERSION

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  http: 8000
  grpc: 9000

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 2000m
    memory: 2Gi
  requests:
    cpu: 50m
    memory: 50Mi

nodeSelector: {}

tolerations: []

affinity: {}

config:
  server:
    http: 
      corsAllowOrigins: []
  database:
    maxOpenConns: 100
    maxIdleConns: 10
    # minutes
    connMaxLifetime: 60
    driver: postgresql
    host: postgresql
    port: 5432
    dbname: univer
    username: postgres
    password: postgres
    replicaHost: ""
  rabbitmq:
    host: rabbitmq
    port: 5672
    username: guest
    password: guest
    cluster:
      enabled: false
      addr: ""
      username: ""
      password: ""
      vhost: "/"
      schema: amqp
  redis:
    # if use redis cluster, use comma to separate multiple redis servers
    # for example: redis1:6379,redis2:6379
    addr: redis:6379
    read_timeout: 1s
    write_timeout: 1s
    db: 0
    username: ""
    password: ""
    sentinel:
      enabled: false
      masterName: ""
      sentinelAddr: ""
      username: ""
      password: ""
  apply:
    host: collaboration-server
    port: 5002
  admin: []
  s3:
    accessKeyID: ""
    accessKeySecret: ""
    region: oss-cn-shenzhen
    endpoint: https://oss-cn-shenzhen.aliyuncs.com
    endpointPublic: ""
    usePathStyle: false
    presignExpires: 3600s
    defaultBucket: univer
  temporal:
    addr: univer-temporal:7233
    namespace: default
  auth:
    enabled: false
    univerEnabled: false
    cookieDomain: "abc.example.com"
    casdoorSDK:
      organizationName: ""
      applicationName: ""
    oidc:
      enabled: false
      issuer: https://accounts.google.com
      clientID: "xxxx"
      clientSecret: "xxxxxxxxxx"
      redirectURL: "http://example.com/oidc/callback"
      cookieDomain: "abc.example.com" # deprecated
    oauth2:
      enabled: false
      clientID: "xxxx"
      clientSecret: "xxxxxxxxxx"
      redirectURL: "http://example.com/oauth2/callback"
      cookieDomain: "abc.example.com" # deprecated
      authURL: "http://localhost:8081/oauth/authorize"
      tokenURL: "http://localhost:8081/oauth/token"
      apiURL: "http://localhost:8081/oauth/userinfo"
      scopes: "all"
      openidPath: "id"
      emailPath: "email"
      namePath: "name"
      avatarPath: "avatar"
    anonymous:
      enabled: false
    permission:
      enabled: false
      defaultShareScope: ""
      defaultShareRole: ""
    admin:
      userIDs: []
  apiLimit:
    method:
      tokens: 600
      interval: 30s
    ip: {}
    perMethod: {}
    user:
      tokens: 300
      interval: 30s
    perMethodUser: {}
  sentryConfig:
    dsn: ""
  usip:
    enabled: false
    uri:
      userInfo: "http://usip:8080/userinfo"
      collaborators: "http://usip:8080/collaborators"
      role: "http://usip:8080/role"
      credential: "http://usip:8080/credential"
  dataProtectionConf:
    enableProtection: false
    kmsServiceName: "none"
    dataKeyRotate: 5s
    dataKeyCacheExpiration: 30s
    localKMS:
      cmkAlias: alias/name
      cmkBase64: "key base64"
    awskms:
      accessKeyID: ""
      accessKeySecret: ""
      region: ""
      kmsKeyID: "cmkid or alias"
  sesConfig:
    accessKey: ""
    accessSecret: ""
    region: ""
    templateName: ""
    redirectURL: "http://example.com/oidc/email-callback"
    loginErrorURL: "http://example.com/fail"
  postHogConf:
    enabled: false
    endpoint: ""
    projectKey: ""
  entitlementConf:
    enable: false
    defaultEntiConf:
      anonymousDefaultEntiId: 1
      registeredDefaultEntiId: 2
    cronConf:
      reportRetryCron: "@every 10s"
      minRetryInterval: 10
      retryRate: 5
      pendingSubCleanCron: "@every 60s"
      detectInterval: 300
      cleanRate: 2
    stripeConf:
      apiPK: ""
      apiSK: ""
      whSK: ""
      timeout: 10
  workspace:
    enabled: false

license:
  LICENSE: ""
  publicKey: ""
  licenseV2: ""
  licenseKeyV2: ""

casdoorLicense:
    publicKey: ""

job:
  image:
    registry: univer-acr-registry.cn-shenzhen.cr.aliyuncs.com
    repository: release/universer-sql
    pullPolicy: IfNotPresent
    tag: "0.0.11"

istio:
  enabled: false
  
  gateway:
    enabled: false
    hosts:
    - univer.private
    gateways:
    - univer
  
  featureGateway:
    enabled: false
    hosts:
    - univer.feature
    gateways:
    - univer-feature

  forbbidenApi: []