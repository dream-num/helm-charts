# Default values for universer.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  registry: univer-acr-registry.cn-shenzhen.cr.aliyuncs.com
  repository: release/universer
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "41dce0e"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  http: 8000
  grpc: 9000

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  host: univer.private
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

config:
  postgresql:
    host: postgresql
    port: 5432
    database: univer
    username: postgres
    password: postgres
  rabbitmq:
    host: rabbitmq
    port: 5672
    username: guest
    password: guest
  transform:
    host: collaboration-server
    port: 5001
  apply:
    host: collaboration-server
    port: 5002
  admin: []

license:
  LICENSE: ""
  publicKey: ""

job:
  image:
    registry: univer-acr-registry.cn-shenzhen.cr.aliyuncs.com
    repository: release/postgresql-client
    pullPolicy: IfNotPresent
    tag: "0.0.1"
  
  # scripts object used to init database, filed is some sql or shell script, like:
  # scripts:
  #   univer_schema.sql: xxxx
  scripts:
    univer_schema.sql: |
      --
      -- PostgreSQL database dump
      --

      -- Dumped from database version 16.0 (Debian 16.0-1.pgdg120+1)
      -- Dumped by pg_dump version 16.0 (Debian 16.0-1.pgdg120+1)

      SET statement_timeout = 0;
      SET lock_timeout = 0;
      SET idle_in_transaction_session_timeout = 0;
      SET client_encoding = 'UTF8';
      SET standard_conforming_strings = on;
      SELECT pg_catalog.set_config('search_path', '', false);
      SET check_function_bodies = false;
      SET xmloption = content;
      SET client_min_messages = warning;
      SET row_security = off;

      --
      -- Name: universer; Type: SCHEMA; Schema: -; Owner: postgres
      --

      CREATE SCHEMA universer;


      ALTER SCHEMA universer OWNER TO postgres;

      SET default_tablespace = '';

      SET default_table_access_method = heap;

      --
      -- Name: changeset; Type: TABLE; Schema: universer; Owner: postgres
      --

      CREATE TABLE universer.changeset (
          id bigint NOT NULL,
          created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
          updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
          deleted_at timestamp with time zone,
          unit_id character varying(255) NOT NULL,
          revision integer NOT NULL,
          type smallint NOT NULL,
          base_rev integer NOT NULL,
          user_id character varying(255) NOT NULL,
          mutations jsonb DEFAULT '[]'::jsonb
      );


      ALTER TABLE universer.changeset OWNER TO postgres;

      --
      -- Name: changeset_id_seq; Type: SEQUENCE; Schema: universer; Owner: postgres
      --

      CREATE SEQUENCE universer.changeset_id_seq
          START WITH 1
          INCREMENT BY 1
          NO MINVALUE
          NO MAXVALUE
          CACHE 1;


      ALTER SEQUENCE universer.changeset_id_seq OWNER TO postgres;

      --
      -- Name: changeset_id_seq; Type: SEQUENCE OWNED BY; Schema: universer; Owner: postgres
      --

      ALTER SEQUENCE universer.changeset_id_seq OWNED BY universer.changeset.id;


      --
      -- Name: resource; Type: TABLE; Schema: universer; Owner: postgres
      --

      CREATE TABLE universer.resource (
          id integer NOT NULL,
          created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
          updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
          deleted_at timestamp with time zone,
          resource_id character varying NOT NULL,
          name character varying NOT NULL,
          data jsonb DEFAULT '{}'::jsonb
      );


      ALTER TABLE universer.resource OWNER TO postgres;

      --
      -- Name: resource_id_seq; Type: SEQUENCE; Schema: universer; Owner: postgres
      --

      CREATE SEQUENCE universer.resource_id_seq
          AS integer
          START WITH 1
          INCREMENT BY 1
          NO MINVALUE
          NO MAXVALUE
          CACHE 1;


      ALTER SEQUENCE universer.resource_id_seq OWNER TO postgres;

      --
      -- Name: resource_id_seq; Type: SEQUENCE OWNED BY; Schema: universer; Owner: postgres
      --

      ALTER SEQUENCE universer.resource_id_seq OWNED BY universer.resource.id;


      --
      -- Name: sheet_block; Type: TABLE; Schema: universer; Owner: postgres
      --

      CREATE TABLE universer.sheet_block (
          id integer NOT NULL,
          created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
          updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
          deleted_at timestamp with time zone,
          block_id character varying NOT NULL,
          start_row integer NOT NULL,
          end_row integer NOT NULL,
          rows jsonb DEFAULT '{}'::jsonb
      );


      ALTER TABLE universer.sheet_block OWNER TO postgres;

      --
      -- Name: sheet_block_id_seq; Type: SEQUENCE; Schema: universer; Owner: postgres
      --

      CREATE SEQUENCE universer.sheet_block_id_seq
          AS integer
          START WITH 1
          INCREMENT BY 1
          NO MINVALUE
          NO MAXVALUE
          CACHE 1;


      ALTER SEQUENCE universer.sheet_block_id_seq OWNER TO postgres;

      --
      -- Name: sheet_block_id_seq; Type: SEQUENCE OWNED BY; Schema: universer; Owner: postgres
      --

      ALTER SEQUENCE universer.sheet_block_id_seq OWNED BY universer.sheet_block.id;


      --
      -- Name: unit; Type: TABLE; Schema: universer; Owner: postgres
      --

      CREATE TABLE universer.unit (
          id integer NOT NULL,
          created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
          updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
          deleted_at timestamp with time zone,
          unit_id character varying NOT NULL,
          creator character varying NOT NULL,
          name character varying,
          type smallint NOT NULL
      );


      ALTER TABLE universer.unit OWNER TO postgres;

      --
      -- Name: workbook_id_seq; Type: SEQUENCE; Schema: universer; Owner: postgres
      --

      CREATE SEQUENCE universer.workbook_id_seq
          AS integer
          START WITH 1
          INCREMENT BY 1
          NO MINVALUE
          NO MAXVALUE
          CACHE 1;


      ALTER SEQUENCE universer.workbook_id_seq OWNER TO postgres;

      --
      -- Name: workbook_id_seq; Type: SEQUENCE OWNED BY; Schema: universer; Owner: postgres
      --

      ALTER SEQUENCE universer.workbook_id_seq OWNED BY universer.unit.id;


      --
      -- Name: workbook_top_snapshot; Type: TABLE; Schema: universer; Owner: postgres
      --

      CREATE TABLE universer.workbook_top_snapshot (
          id integer NOT NULL,
          created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
          updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
          deleted_at timestamp with time zone,
          unit_id character varying NOT NULL,
          snapshot_id character varying NOT NULL,
          revision integer NOT NULL,
          sheet_count integer NOT NULL,
          sheet_blocks jsonb DEFAULT '{}'::jsonb,
          worksheets jsonb DEFAULT '{}'::jsonb,
          resources jsonb DEFAULT '{}'::jsonb,
          original_meta jsonb DEFAULT '{}'::jsonb
      );


      ALTER TABLE universer.workbook_top_snapshot OWNER TO postgres;

      --
      -- Name: workbook_top_snapshot_id_seq; Type: SEQUENCE; Schema: universer; Owner: postgres
      --

      CREATE SEQUENCE universer.workbook_top_snapshot_id_seq
          AS integer
          START WITH 1
          INCREMENT BY 1
          NO MINVALUE
          NO MAXVALUE
          CACHE 1;


      ALTER SEQUENCE universer.workbook_top_snapshot_id_seq OWNER TO postgres;

      --
      -- Name: workbook_top_snapshot_id_seq; Type: SEQUENCE OWNED BY; Schema: universer; Owner: postgres
      --

      ALTER SEQUENCE universer.workbook_top_snapshot_id_seq OWNED BY universer.workbook_top_snapshot.id;


      --
      -- Name: worksheet; Type: TABLE; Schema: universer; Owner: postgres
      --

      CREATE TABLE universer.worksheet (
          id integer NOT NULL,
          created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
          updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
          deleted_at timestamp with time zone,
          unit_id character varying NOT NULL,
          sheet_id character varying NOT NULL,
          type smallint NOT NULL,
          name character varying NOT NULL,
          row_count integer NOT NULL,
          column_count integer NOT NULL,
          index integer NOT NULL,
          original_meta jsonb DEFAULT '{}'::jsonb,
          snapshot_id character varying
      );


      ALTER TABLE universer.worksheet OWNER TO postgres;

      --
      -- Name: worksheet_id_seq; Type: SEQUENCE; Schema: universer; Owner: postgres
      --

      CREATE SEQUENCE universer.worksheet_id_seq
          AS integer
          START WITH 1
          INCREMENT BY 1
          NO MINVALUE
          NO MAXVALUE
          CACHE 1;


      ALTER SEQUENCE universer.worksheet_id_seq OWNER TO postgres;

      --
      -- Name: worksheet_id_seq; Type: SEQUENCE OWNED BY; Schema: universer; Owner: postgres
      --

      ALTER SEQUENCE universer.worksheet_id_seq OWNED BY universer.worksheet.id;


      --
      -- Name: changeset id; Type: DEFAULT; Schema: universer; Owner: postgres
      --

      ALTER TABLE ONLY universer.changeset ALTER COLUMN id SET DEFAULT nextval('universer.changeset_id_seq'::regclass);


      --
      -- Name: resource id; Type: DEFAULT; Schema: universer; Owner: postgres
      --

      ALTER TABLE ONLY universer.resource ALTER COLUMN id SET DEFAULT nextval('universer.resource_id_seq'::regclass);


      --
      -- Name: sheet_block id; Type: DEFAULT; Schema: universer; Owner: postgres
      --

      ALTER TABLE ONLY universer.sheet_block ALTER COLUMN id SET DEFAULT nextval('universer.sheet_block_id_seq'::regclass);


      --
      -- Name: unit id; Type: DEFAULT; Schema: universer; Owner: postgres
      --

      ALTER TABLE ONLY universer.unit ALTER COLUMN id SET DEFAULT nextval('universer.workbook_id_seq'::regclass);


      --
      -- Name: workbook_top_snapshot id; Type: DEFAULT; Schema: universer; Owner: postgres
      --

      ALTER TABLE ONLY universer.workbook_top_snapshot ALTER COLUMN id SET DEFAULT nextval('universer.workbook_top_snapshot_id_seq'::regclass);


      --
      -- Name: worksheet id; Type: DEFAULT; Schema: universer; Owner: postgres
      --

      ALTER TABLE ONLY universer.worksheet ALTER COLUMN id SET DEFAULT nextval('universer.worksheet_id_seq'::regclass);


      --
      -- Name: changeset changeset_pkey; Type: CONSTRAINT; Schema: universer; Owner: postgres
      --

      ALTER TABLE ONLY universer.changeset
          ADD CONSTRAINT changeset_pkey PRIMARY KEY (id);


      --
      -- Name: resource resource_pkey; Type: CONSTRAINT; Schema: universer; Owner: postgres
      --

      ALTER TABLE ONLY universer.resource
          ADD CONSTRAINT resource_pkey PRIMARY KEY (id);


      --
      -- Name: sheet_block sheet_block_pkey; Type: CONSTRAINT; Schema: universer; Owner: postgres
      --

      ALTER TABLE ONLY universer.sheet_block
          ADD CONSTRAINT sheet_block_pkey PRIMARY KEY (id);


      --
      -- Name: resource uniq_resource_resource_id; Type: CONSTRAINT; Schema: universer; Owner: postgres
      --

      ALTER TABLE ONLY universer.resource
          ADD CONSTRAINT uniq_resource_resource_id UNIQUE (resource_id);


      --
      -- Name: changeset uniq_unit_id_revision; Type: CONSTRAINT; Schema: universer; Owner: postgres
      --

      ALTER TABLE ONLY universer.changeset
          ADD CONSTRAINT uniq_unit_id_revision UNIQUE (unit_id, revision);


      --
      -- Name: workbook_top_snapshot uniq_workbook_top_snapshot_snapshot_id; Type: CONSTRAINT; Schema: universer; Owner: postgres
      --

      ALTER TABLE ONLY universer.workbook_top_snapshot
          ADD CONSTRAINT uniq_workbook_top_snapshot_snapshot_id UNIQUE (snapshot_id);


      --
      -- Name: workbook_top_snapshot uniq_workbook_top_snapshot_unit_id_revision; Type: CONSTRAINT; Schema: universer; Owner: postgres
      --

      ALTER TABLE ONLY universer.workbook_top_snapshot
          ADD CONSTRAINT uniq_workbook_top_snapshot_unit_id_revision UNIQUE (unit_id, revision);


      --
      -- Name: unit uniq_workbook_unit_id; Type: CONSTRAINT; Schema: universer; Owner: postgres
      --

      ALTER TABLE ONLY universer.unit
          ADD CONSTRAINT uniq_workbook_unit_id UNIQUE (unit_id);


      --
      -- Name: worksheet uniq_worksheet_unit_id_snapshot_sheet_id; Type: CONSTRAINT; Schema: universer; Owner: postgres
      --

      ALTER TABLE ONLY universer.worksheet
          ADD CONSTRAINT uniq_worksheet_unit_id_snapshot_sheet_id UNIQUE (unit_id, snapshot_id, sheet_id);


      --
      -- Name: unit workbook_pkey; Type: CONSTRAINT; Schema: universer; Owner: postgres
      --

      ALTER TABLE ONLY universer.unit
          ADD CONSTRAINT workbook_pkey PRIMARY KEY (id);


      --
      -- Name: workbook_top_snapshot workbook_top_snapshot_pkey; Type: CONSTRAINT; Schema: universer; Owner: postgres
      --

      ALTER TABLE ONLY universer.workbook_top_snapshot
          ADD CONSTRAINT workbook_top_snapshot_pkey PRIMARY KEY (id);


      --
      -- Name: worksheet worksheet_pkey; Type: CONSTRAINT; Schema: universer; Owner: postgres
      --

      ALTER TABLE ONLY universer.worksheet
          ADD CONSTRAINT worksheet_pkey PRIMARY KEY (id);


      --
      -- Name: idx_changeset_deleted_at; Type: INDEX; Schema: universer; Owner: postgres
      --

      CREATE INDEX idx_changeset_deleted_at ON universer.changeset USING btree (deleted_at);


      --
      -- Name: uniq_sheet_block_block_id; Type: INDEX; Schema: universer; Owner: postgres
      --

      CREATE UNIQUE INDEX uniq_sheet_block_block_id ON universer.sheet_block USING btree (block_id);


      --
      -- PostgreSQL database dump complete
      --
    connector_schema.sql: |
      --
      -- PostgreSQL database dump
      --

      -- Dumped from database version 16.1 (Debian 16.1-1.pgdg120+1)
      -- Dumped by pg_dump version 16.1 (Debian 16.1-1.pgdg120+1)

      SET statement_timeout = 0;
      SET lock_timeout = 0;
      SET idle_in_transaction_session_timeout = 0;
      SET client_encoding = 'UTF8';
      SET standard_conforming_strings = on;
      SELECT pg_catalog.set_config('search_path', '', false);
      SET check_function_bodies = false;
      SET xmloption = content;
      SET client_min_messages = warning;
      SET row_security = off;

      --
      -- Name: connector; Type: SCHEMA; Schema: -; Owner: postgres
      --

      CREATE SCHEMA connector;


      ALTER SCHEMA connector OWNER TO postgres;

      SET default_tablespace = '';

      SET default_table_access_method = heap;

      --
      -- Name: connector; Type: TABLE; Schema: connector; Owner: postgres
      --

      CREATE TABLE connector.connector (
          id integer NOT NULL,
          created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
          updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
          deleted_at timestamp with time zone,
          name text DEFAULT ''::text NOT NULL,
          uuid text DEFAULT ''::text NOT NULL,
          config text DEFAULT ''::text NOT NULL,
          state jsonb DEFAULT '{}'::jsonb NOT NULL,
          table_info jsonb DEFAULT '{}'::jsonb NOT NULL
      );


      ALTER TABLE connector.connector OWNER TO postgres;

      --
      -- Name: connector_id_seq; Type: SEQUENCE; Schema: connector; Owner: postgres
      --

      CREATE SEQUENCE connector.connector_id_seq
          AS integer
          START WITH 1
          INCREMENT BY 1
          NO MINVALUE
          NO MAXVALUE
          CACHE 1;


      ALTER SEQUENCE connector.connector_id_seq OWNER TO postgres;

      --
      -- Name: connector_id_seq; Type: SEQUENCE OWNED BY; Schema: connector; Owner: postgres
      --

      ALTER SEQUENCE connector.connector_id_seq OWNED BY connector.connector.id;


      --
      -- Name: dataform; Type: TABLE; Schema: connector; Owner: postgres
      --

      CREATE TABLE connector.dataform (
          id integer NOT NULL,
          created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
          updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
          deleted_at timestamp with time zone,
          uuid text DEFAULT ''::text NOT NULL,
          query_info jsonb DEFAULT '{}'::jsonb NOT NULL,
          schedule text DEFAULT ''::text NOT NULL
      );


      ALTER TABLE connector.dataform OWNER TO postgres;

      --
      -- Name: dataform_id_seq; Type: SEQUENCE; Schema: connector; Owner: postgres
      --

      CREATE SEQUENCE connector.dataform_id_seq
          AS integer
          START WITH 1
          INCREMENT BY 1
          NO MINVALUE
          NO MAXVALUE
          CACHE 1;


      ALTER SEQUENCE connector.dataform_id_seq OWNER TO postgres;

      --
      -- Name: dataform_id_seq; Type: SEQUENCE OWNED BY; Schema: connector; Owner: postgres
      --

      ALTER SEQUENCE connector.dataform_id_seq OWNED BY connector.dataform.id;


      --
      -- Name: displayer; Type: TABLE; Schema: connector; Owner: postgres
      --

      CREATE TABLE connector.displayer (
          id integer NOT NULL,
          created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
          updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
          deleted_at timestamp with time zone,
          name text DEFAULT ''::text NOT NULL,
          uuid text DEFAULT ''::text NOT NULL,
          config text DEFAULT ''::text NOT NULL
      );


      ALTER TABLE connector.displayer OWNER TO postgres;

      --
      -- Name: displayer_id_seq; Type: SEQUENCE; Schema: connector; Owner: postgres
      --

      CREATE SEQUENCE connector.displayer_id_seq
          AS integer
          START WITH 1
          INCREMENT BY 1
          NO MINVALUE
          NO MAXVALUE
          CACHE 1;


      ALTER SEQUENCE connector.displayer_id_seq OWNER TO postgres;

      --
      -- Name: displayer_id_seq; Type: SEQUENCE OWNED BY; Schema: connector; Owner: postgres
      --

      ALTER SEQUENCE connector.displayer_id_seq OWNED BY connector.displayer.id;


      --
      -- Name: stream_view; Type: TABLE; Schema: connector; Owner: postgres
      --

      CREATE TABLE connector.stream_view (
          id integer NOT NULL,
          created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
          updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
          deleted_at timestamp with time zone,
          name text DEFAULT ''::text NOT NULL,
          uuid text DEFAULT ''::text NOT NULL,
          config text DEFAULT ''::text NOT NULL
      );


      ALTER TABLE connector.stream_view OWNER TO postgres;

      --
      -- Name: stream_view_id_seq; Type: SEQUENCE; Schema: connector; Owner: postgres
      --

      CREATE SEQUENCE connector.stream_view_id_seq
          AS integer
          START WITH 1
          INCREMENT BY 1
          NO MINVALUE
          NO MAXVALUE
          CACHE 1;


      ALTER SEQUENCE connector.stream_view_id_seq OWNER TO postgres;

      --
      -- Name: stream_view_id_seq; Type: SEQUENCE OWNED BY; Schema: connector; Owner: postgres
      --

      ALTER SEQUENCE connector.stream_view_id_seq OWNED BY connector.stream_view.id;


      --
      -- Name: connector id; Type: DEFAULT; Schema: connector; Owner: postgres
      --

      ALTER TABLE ONLY connector.connector ALTER COLUMN id SET DEFAULT nextval('connector.connector_id_seq'::regclass);


      --
      -- Name: dataform id; Type: DEFAULT; Schema: connector; Owner: postgres
      --

      ALTER TABLE ONLY connector.dataform ALTER COLUMN id SET DEFAULT nextval('connector.dataform_id_seq'::regclass);


      --
      -- Name: displayer id; Type: DEFAULT; Schema: connector; Owner: postgres
      --

      ALTER TABLE ONLY connector.displayer ALTER COLUMN id SET DEFAULT nextval('connector.displayer_id_seq'::regclass);


      --
      -- Name: stream_view id; Type: DEFAULT; Schema: connector; Owner: postgres
      --

      ALTER TABLE ONLY connector.stream_view ALTER COLUMN id SET DEFAULT nextval('connector.stream_view_id_seq'::regclass);


      --
      -- Name: connector connector_pkey; Type: CONSTRAINT; Schema: connector; Owner: postgres
      --

      ALTER TABLE ONLY connector.connector
          ADD CONSTRAINT connector_pkey PRIMARY KEY (id);


      --
      -- Name: dataform dataform_pkey; Type: CONSTRAINT; Schema: connector; Owner: postgres
      --

      ALTER TABLE ONLY connector.dataform
          ADD CONSTRAINT dataform_pkey PRIMARY KEY (id);


      --
      -- Name: displayer displayer_pkey; Type: CONSTRAINT; Schema: connector; Owner: postgres
      --

      ALTER TABLE ONLY connector.displayer
          ADD CONSTRAINT displayer_pkey PRIMARY KEY (id);


      --
      -- Name: stream_view stream_view_pkey; Type: CONSTRAINT; Schema: connector; Owner: postgres
      --

      ALTER TABLE ONLY connector.stream_view
          ADD CONSTRAINT stream_view_pkey PRIMARY KEY (id);


      --
      -- Name: test; Type: INDEX; Schema: connector; Owner: postgres
      --

      CREATE UNIQUE INDEX test ON connector.stream_view USING btree (uuid, deleted_at) NULLS NOT DISTINCT;


      --
      -- Name: uqe_connector_uuid; Type: INDEX; Schema: connector; Owner: postgres
      --

      CREATE UNIQUE INDEX uqe_connector_uuid ON connector.connector USING btree (uuid);


      --
      -- Name: uqe_dataform_uuid; Type: INDEX; Schema: connector; Owner: postgres
      --

      CREATE UNIQUE INDEX uqe_dataform_uuid ON connector.dataform USING btree (uuid, deleted_at) NULLS NOT DISTINCT;


      --
      -- Name: uqe_displayer_uuid; Type: INDEX; Schema: connector; Owner: postgres
      --

      CREATE UNIQUE INDEX uqe_displayer_uuid ON connector.displayer USING btree (uuid, deleted_at) NULLS NOT DISTINCT;


      --
      -- PostgreSQL database dump complete
      --
  
istio:
  enabled: false
  
  gateway:
    enabled: false
    host: univer.private

    # select istio ingress gateway. for example
    # ingressSelector:
    #   istio: ingressgateway
    ingressSelector: {}

    tls:
      enabled: false
      credentialName: ""