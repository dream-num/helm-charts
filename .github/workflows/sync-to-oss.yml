name: ðŸ”„ Sync to OSS

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      sync-docker:
        description: 'can sync docker-compose.zip'
        required: false
        default: 'true'
      sync-install:
        description: 'can sync install.sh'
        required: false
        default: 'true'
      version:
        description: 'version(eg: v0.0.1)'
        required: true

jobs:
  # update:
  #   name: Sync to OSS
  #   runs-on: ubuntu-latest
  #   steps:

  #   - name: default Checkout
  #     uses: actions/checkout@v4

  #   - name: Version tag
  #     id: version
  #     run: |
  #       if [[ -z "${GITHUB_REF##refs/tags/v*}" ]]; then
  #         echo ::set-output name=version::${GITHUB_REF#refs/tags/v}
  #       else
  #         version=${{ inputs.version }}
  #         echo ::set-output name=version::${version#v}
  #       fi
    
  #   - name: tar docker-compose.tar.gz
  #     run: |
  #       cd docker-compose
  #       tar -czvf ~/docker-compose.tar.gz * .[!.]*
  #       cp ~/docker-compose.tar.gz ~/docker-compose.${{ steps.version.outputs.version }}.tar.gz

  #   - name: Sync docker-compose.tar.gz to OSS
  #     uses: hexf00/upload-to-oss@v1
  #     with:
  #       source: '~/docker-compose.tar.gz'
  #       dest: 'release/docker-compose.tar.gz'
  #       bucket: ${{secrets.OSS_BUCKET}}
  #       region: "oss-cn-shenzhen"
  #       accessKeyId: ${{secrets.S3_ACCESS_KEY_ID}}
  #       accessKeySecret: ${{secrets.S3_ACCESS_KEY_SECRET}}
  #     if: ${{ github.event.inputs.sync-docker == 'true' }}

  #   - name: Sync docker-compose.${{ steps.version.outputs.version }}.tar.gz to OSS
  #     uses: hexf00/upload-to-oss@v1
  #     with:
  #       source: '~/docker-compose.${{ steps.version.outputs.version }}.tar.gz'
  #       dest: 'release/docker-compose.${{ steps.version.outputs.version }}.tar.gz'
  #       bucket: ${{secrets.OSS_BUCKET}}
  #       region: "oss-cn-shenzhen"
  #       accessKeyId: ${{secrets.S3_ACCESS_KEY_ID}}
  #       accessKeySecret: ${{secrets.S3_ACCESS_KEY_SECRET}}
  #     if: ${{ github.event.inputs.sync-docker == 'true' }}

  #   - name: Sync install.sh to OSS
  #     uses: hexf00/upload-to-oss@v1
  #     with:
  #       source: 'install.sh'
  #       dest: tool/install.sh
  #       bucket: ${{secrets.OSS_BUCKET}}
  #       region: "oss-cn-shenzhen"
  #       accessKeyId: ${{secrets.S3_ACCESS_KEY_ID}}
  #       accessKeySecret: ${{secrets.S3_ACCESS_KEY_SECRET}}
  #     if: ${{ github.event.inputs.sync-install == 'true' }}

  #   - name: Sync get-docker/get-docker-official-script.sh to OSS
  #     uses: hexf00/upload-to-oss@v1
  #     with:
  #       source: 'get-docker/get-docker-official-script.sh'
  #       dest: tool/get-docker-official-script.sh
  #       bucket: ${{secrets.OSS_BUCKET}}
  #       region: "oss-cn-shenzhen"
  #       accessKeyId: ${{secrets.S3_ACCESS_KEY_ID}}
  #       accessKeySecret: ${{secrets.S3_ACCESS_KEY_SECRET}}
  #     if: ${{ github.event.inputs.sync-install == 'true' }}

  #   - name: Sync get-docker/get-docker.sh to OSS
  #     uses: hexf00/upload-to-oss@v1
  #     with:
  #       source: 'get-docker/get-docker.sh'
  #       dest: tool/get-docker.sh
  #       bucket: ${{secrets.OSS_BUCKET}}
  #       region: "oss-cn-shenzhen"
  #       accessKeyId: ${{secrets.S3_ACCESS_KEY_ID}}
  #       accessKeySecret: ${{secrets.S3_ACCESS_KEY_SECRET}}
  #     if: ${{ github.event.inputs.sync-install == 'true' }}

  # update-chart:
  #   name: Sync helm chart to oci
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: default Checkout
  #     uses: actions/checkout@v4

  #   - name: Login to Aliyun Container Registry (ACR)
  #     uses: aliyun/acr-login@v1
  #     with:
  #       login-server: univer-acr-registry.cn-shenzhen.cr.aliyuncs.com
  #       region-id: cn-shenzhen
  #       username: "${{ secrets.REGISTRY_USERNAME }}"
  #       password: "${{ secrets.REGISTRY_PASSWORD }}"

  #   - name: Sync helm chart to oci
  #     run: |
  #       helm repo add istio https://istio-release.storage.googleapis.com/charts
  #       helm repo update
  #       make all

  update-sql:
    name: Sync sql to oss
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - uses: actions/checkout@v4
      with:
        repository: dream-num/container-images
        path: container-images
        token: ${{ secrets.GH_TOKEN }}

    - name: tar sql.tar.gz
      run: |
        mkdir -p /tmp/sql
        cp container-images/universer-sql/postgresql/sql/universer_schema.sql /tmp/sql/postgresql.sql
        cp container-images/universer-sql/mysql/sql/univer.sql /tmp/sql/mysql.sql
        cp container-images/universer-sql/gaussdb/sql/universer_schema.sql /tmp/sql/gaussdb.sql
        cp container-images/universer-sql/dameng/sql/universer_schema.sql /tmp/sql/dameng.sql

        cd temporal-sql
        tar -czvf temporal-sql.tar.gz *
        mv temporal-sql.tar.gz /tmp/sql/temporal-sql.tar.gz
    
    - name: Sync postgresql.sql to OSS
      uses: hexf00/upload-to-oss@v1
      with:
        source: '/tmp/sql/postgresql.sql'
        dest: release/postgresql.sql
        bucket: ${{secrets.OSS_BUCKET}}
        region: "oss-cn-shenzhen"
        accessKeyId: ${{secrets.S3_ACCESS_KEY_ID}}
        accessKeySecret: ${{secrets.S3_ACCESS_KEY_SECRET}}

    - name: Sync mysql.sql to OSS
      uses: hexf00/upload-to-oss@v1
      with:
        source: '/tmp/sql/mysql.sql'
        dest: release/mysql.sql
        bucket: ${{secrets.OSS_BUCKET}}
        region: "oss-cn-shenzhen"
        accessKeyId: ${{secrets
    
    - name: Sync gaussdb.sql to OSS
      uses: hexf00/upload-to-oss@v1
      with:
        source: '/tmp/sql/gaussdb.sql'
        dest: release/gaussdb.sql
        bucket: ${{secrets.OSS_BUCKET}}
        region: "oss-cn-shenzhen"
        accessKeyId: ${{secrets.S3_ACCESS_KEY_ID}}
        accessKeySecret: ${{secrets.S3_ACCESS_KEY_SECRET}}

    - name: Sync dameng.sql to OSS
      uses: hexf00/upload-to-oss@v1
      with:
        source: '/tmp/sql/dameng.sql'
        dest: release/dameng.sql
        bucket: ${{secrets.OSS_BUCKET}}
        region: "oss-cn-shenzhen"
        accessKeyId: ${{secrets.S3_ACCESS_KEY_ID}}
        accessKeySecret: ${{secrets.S3_ACCESS_KEY_SECRET}}
    
    - name: Sync temporal-sql.tar.gz to OSS
      uses: hexf00/upload-to-oss@v1
      with:
        source: '/tmp/sql/temporal-sql.tar.gz'
        dest: 'release/temporal-sql.tar.gz'
        bucket: ${{secrets.OSS_BUCKET}}
        region: "oss-cn-shenzhen"
        accessKeyId: ${{secrets.S3_ACCESS_KEY_ID}}
        accessKeySecret: ${{secrets.S3_ACCESS_KEY_SECRET}}