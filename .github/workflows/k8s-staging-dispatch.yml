name: ⚙️ K8s staging dispatch

on:
  repository_dispatch:
    types: [dispatch]

jobs:
  deploy:
    name: K8sDeploy
    runs-on: arc-runner-set
    steps:
      - uses: actions/checkout@v3

      - uses: actions/checkout@v3
        if: ${{ github.event.client_payload.service == 'cibot-rule' }}
        with:
          repository: dream-num/ci-bot-config
          path: charts/cibot-rule/rule
          token: ${{ secrets.GH_TOKEN }}

      - uses: azure/setup-helm@v3
        with:
          version: v3.12.0
      
      - name: DownloadSwaggerJson
        if: ${{ github.event.client_payload.service == 'swagger-ui' }}
        run: |
          curl -o charts/swagger-ui/config/openapi.yaml https://${{ secrets.GH_TOKEN }}@raw.githubusercontent.com/dream-num/univer-protocol/main/openapi.yaml

      - name: HelmUpgradeInstall
        run: |
          echo -e "${{ secrets.KUBECONFIG }}" >> ./kubeconfig

          if [ "${{ github.event.client_payload.service }}" == "universer" ]; then
            
            helm --kubeconfig ./kubeconfig upgrade --install -n ${{ vars.K8S_NAMESPACE }} --create-namespace \
              --set replicaCount=3 \
              --set config.postgresql.password="${{ secrets.POSTGRES_PASSWORD }}" \
              --set config.rabbitmq.password="${{ secrets.RABBITMQ_PASSWORD }}" \
              --set config.redis.addr="redis-master.database.svc.cluster.local:6379" \
              --set-json 'config.admin=[{"user":"admin","password":"${{ secrets.UNIVERSER_ADMIN_PASSWORD }}"}]' \
              --set-json 'config.temporal={"addr":"temporal-frontend.temporal:7233","namespace":"staging"}' \
              --set config.s3.accessKeyID="${{ secrets.S3_ACCESS_KEY_ID }}" \
              --set config.s3.accessKeySecret="${{ secrets.S3_ACCESS_KEY_SECRET }}" \
              --set config.s3.endpoint="https://oss-cn-shenzhen-internal.aliyuncs.com" \
              --set-json 'config.auth={"enabled":true,"oidc":{"issuer":"${{ secrets.OIDC_ISSUER }}","clientID":"${{ secrets.OIDC_CLIENT_ID }}","clientSecret":"${{ secrets.OIDC_CLIENT_SECRET }}","redirectURL":"${{ secrets.OIDC_REDIRECT_URL }}","cookieDomain":"${{ secrets.K8S_UNIVER_HOST }}"}}' \
              --set-json 'license={"LICENSE":"${{ secrets.LICENSE }}","publicKey":"${{ secrets.PUBLIC_KEY }}"}' \
              --set-json 'image={"registry":"${{ vars.REGISTRY }}","repository":"univer/universer","tag":"${{ github.event.client_payload.tag }}"}' \
              --set job.image.registry="${{ vars.REGISTRY }}" \
              --set-json 'imagePullSecrets=[{"name":"regcred"}]' \
              --set-json 'podAnnotations={"image-version":"${{ github.event.client_payload.tag }}"}' \
              --set istio.enabled=true \
              --set-json 'istio.gateway={"enabled":true,"host":"${{ secrets.K8S_UNIVER_HOST }}","ingressSelector":{"istio":"ingress"},"tls":{"enabled":true,"credentialName":"staging-host-credential"}}' \
              --set-json 'affinity={"nodeAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"weight":50,"preference":{"matchExpressions":[{"key":"univer.ai/instance-type","operator":"In","values":["biz-intensive"]}]}}]}}' \
              universer charts/universer

          elif [ "${{ github.event.client_payload.service }}" == "collaboration-server" ]; then 

            helm --kubeconfig ./kubeconfig upgrade --install -n ${{ vars.K8S_NAMESPACE }} --create-namespace \
              --set-json 'image={"registry":"${{ vars.REGISTRY }}","repository":"univer/univer-collaboration","tag":"${{ github.event.client_payload.tag }}"}' \
              --set-json 'imagePullSecrets=[{"name":"regcred"}]' \
              --set istio.enabled=true \
              --set replicaCount=3 \
              --set-json 'podAnnotations={"image-version":"${{ github.event.client_payload.tag }}"}' \
              --set-json 'affinity={"nodeAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"weight":50,"preference":{"matchExpressions":[{"key":"univer.ai/instance-type","operator":"In","values":["biz-intensive"]}]}}]}}' \
              collaboration-server charts/collaboration-server

          elif [ "${{ github.event.client_payload.service }}" == "collaboration-demo" ]; then 

            helm --kubeconfig ./kubeconfig upgrade --install -n ${{ vars.K8S_NAMESPACE }} --create-namespace \
              --set-json 'image={"registry":"${{ vars.REGISTRY }}","repository":"univer/univer-collaboration-demo","tag":"${{ github.event.client_payload.tag }}"}' \
              --set-json 'imagePullSecrets=[{"name":"regcred"}]' \
              --set-json 'podAnnotations={"image-version":"${{ github.event.client_payload.tag }}"}' \
              --set istio.enabled=true \
              --set-json 'istio.gateway={"enabled":true,"host":"${{ secrets.K8S_UNIVER_HOST }}","ingressSelector":{"istio":"ingress"},"tls":{"enabled":true,"credentialName":"staging-host-credential"}}' \
              --set-json 'affinity={"nodeAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"weight":50,"preference":{"matchExpressions":[{"key":"univer.ai/instance-type","operator":"In","values":["biz-intensive"]}]}}]}}' \
              collaboration-demo charts/collaboration-demo

          elif [ "${{ github.event.client_payload.service }}" == "docs" ]; then 

            helm --kubeconfig ./kubeconfig upgrade --install -n prod --create-namespace \
              --set-json 'image={"registry":"${{ vars.REGISTRY }}","repository":"univer/univer-docs","tag":"${{ github.event.client_payload.tag }}"}' \
              --set-json 'imagePullSecrets=[{"name":"regcred"}]' \
              --set-json 'podAnnotations={"image-version":"${{ github.event.client_payload.tag }}"}' \
              --set istio.enabled=true \
              --set-json 'istio.gateway={"enabled":true,"host":"www.univer.work","ingressSelector":{"istio":"ingress"},"tls":{"enabled":true,"credentialName":"docs-host-credential"}}' \
              --set-json 'affinity={"nodeAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"weight":50,"preference":{"matchExpressions":[{"key":"univer.ai/instance-type","operator":"In","values":["biz-intensive"]}]}}]}}' \
              docs charts/docs

          elif [ "${{ github.event.client_payload.service }}" == "pro-docs" ]; then 

            helm --kubeconfig ./kubeconfig upgrade --install -n prod --create-namespace \
              --set-json 'image={"registry":"${{ vars.REGISTRY }}","repository":"univer/univer-pro-docs","tag":"${{ github.event.client_payload.tag }}"}' \
              --set-json 'imagePullSecrets=[{"name":"regcred"}]' \
              --set-json 'podAnnotations={"image-version":"${{ github.event.client_payload.tag }}"}' \
              --set authServerHost="${{ secrets.AUTH_SERVER_HOST }}" \
              --set istio.enabled=true \
              --set-json 'istio.gateway={"enabled":true,"host":"${{ secrets.K8S_PRODOCS_HOST }}","ingressSelector":{"istio":"ingress"}}' \
              --set-json 'affinity={"nodeAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"weight":50,"preference":{"matchExpressions":[{"key":"univer.ai/instance-type","operator":"In","values":["biz-intensive"]}]}}]}}' \
              pro-docs charts/pro-docs

          elif [ "${{ github.event.client_payload.service }}" == "cibot" ] && [ "${{ github.event.client_payload.env }}" == "production" ]; then 

            helm --kubeconfig ./kubeconfig upgrade --install -n prod --create-namespace \
              --set-json 'image={"registry":"${{ vars.REGISTRY }}","repository":"univer/univer-ci-bot","tag":"${{ github.event.client_payload.tag }}"}' \
              --set-json 'imagePullSecrets=[{"name":"regcred"}]' \
              --set-json 'podAnnotations={"image-version":"${{ github.event.client_payload.tag }}"}' \
              --set-json 'affinity={"nodeAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"weight":50,"preference":{"matchExpressions":[{"key":"univer.ai/instance-type","operator":"In","values":["biz-intensive"]}]}}]}}' \
              --set-json 'app={"appId":"838144","installationId":"47646254","webhookProxyUrl":"${{ secrets.UNIVER_CIBOT_WEBHOOK_PROXY_URL }}","githubPem":"${{ secrets.UNIVER_CIBOT_GITHUB_PEM }}"}' \
              --set ruleConfigMap="cibot-rule-univer" \
              cibot-univer charts/cibot

          elif [ "${{ github.event.client_payload.service }}" == "cibot" ] && [ "${{ github.event.client_payload.env }}" == "staging" ]; then
            
            helm --kubeconfig ./kubeconfig upgrade --install -n prod --create-namespace \
              --set-json 'image={"registry":"${{ vars.REGISTRY }}","repository":"univer/univer-ci-bot","tag":"${{ github.event.client_payload.tag }}"}' \
              --set-json 'imagePullSecrets=[{"name":"regcred"}]' \
              --set-json 'podAnnotations={"image-version":"${{ github.event.client_payload.tag }}"}' \
              --set-json 'affinity={"nodeAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"weight":50,"preference":{"matchExpressions":[{"key":"univer.ai/instance-type","operator":"In","values":["biz-intensive"]}]}}]}}' \
              --set-json 'app={"appId":"833865","installationId":"47512467","webhookProxyUrl":"${{ secrets.AWESOME_UNIVER_CIBOT_WEBHOOK_PROXY_URL }}","githubPem":"${{ secrets.AWESOME_UNIVER_CIBOT_GITHUB_PEM }}"}' \
              --set ruleConfigMap="cibot-rule-awesome-univer" \
              cibot-awesome-univer charts/cibot

          elif [ "${{ github.event.client_payload.service }}" == "cibot-rule" ]; then 

            helm --kubeconfig ./kubeconfig upgrade --install -n prod --create-namespace \
              --set path="production" \
              cibot-rule-univer charts/cibot-rule

            helm --kubeconfig ./kubeconfig upgrade --install -n prod --create-namespace \
              --set path="staging" \
              cibot-rule-awesome-univer charts/cibot-rule

          elif [ "${{ github.event.client_payload.service }}" == "worker" ]; then 

            helm --kubeconfig ./kubeconfig upgrade --install -n univer --create-namespace \
              --set replicaCount=3 \
              --set-json 'image={"registry":"${{ vars.REGISTRY }}","repository":"univer/worker-${{ github.event.client_payload.target }}","tag":"${{ github.event.client_payload.tag }}"}' \
              --set-json 'imagePullSecrets=[{"name":"regcred"}]' \
              --set-json 'temporalServer={"host":"temporal-frontend.temporal:7233","namespace":"staging"}' \
              --set-json 'affinity={"nodeAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"weight":1,"preference":{"matchExpressions":[{"key":"univer.ai/instance-type","operator":"In","values":["biz-intensive"]}]}}]}}' \
              worker-${{ github.event.client_payload.target }} charts/worker

          elif [ "${{ github.event.client_payload.service }}" == "swagger-ui" ]; then 

              helm --kubeconfig ./kubeconfig upgrade --install -n swagger --create-namespace \
                --set-json 'affinity={"nodeAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"weight":1,"preference":{"matchExpressions":[{"key":"univer.ai/instance-type","operator":"In","values":["biz-intensive"]}]}}]}}' \
                --set istio.enabled=true \
                --set-json 'istio.gateway={"enabled":true,"host":"${{ secrets.SWAGGER_HOST }}","ingressSelector":{"istio":"ingress"}}' \
                --set-json 'istio.auth={"user":"${{ secrets.SWAGGER_USER }}","password":"${{ secrets.SWAGGER_PASSWORD }}"}' \
                swagger-ui charts/swagger-ui

          fi

      - name: ENDocsDeploy
        if: ${{ github.event.client_payload.service == 'docs' }}
        uses: appleboy/ssh-action@v1.0.0
        env:
          REGISTRY_USERNAME: "${{ secrets.REGISTRY_USERNAME }}"
          REGISTRY_PASSWORD: "${{ secrets.REGISTRY_PASSWORD }}"
        with:
          host: ${{ vars.EN_HOST }}
          username: ${{ vars.EN_HOST_USERNAME }}
          password: ${{ secrets.EN_HOST_PASSWORD }}
          script_stop: true
          envs: REGISTRY_USERNAME,REGISTRY_PASSWORD
          script: |
            echo $REGISTRY_PASSWORD | docker login univer-acr-registry.cn-shenzhen.cr.aliyuncs.com -u $REGISTRY_USERNAME --password-stdin

            docker pull univer-acr-registry.cn-shenzhen.cr.aliyuncs.com/univer/univer-docs:${{ github.event.client_payload.tag }}

            docker stop univer-docs

            docker rm univer-docs
            
            docker run -d --name univer-docs -p 3020:3020 univer-acr-registry.cn-shenzhen.cr.aliyuncs.com/univer/univer-docs:${{ github.event.client_payload.tag }}
      
      - name: UniverExamplesDeploy
        if: ${{ github.event.client_payload.service == 'univer-examples' }}
        uses: appleboy/ssh-action@v1.0.0
        env:
          REGISTRY_USERNAME: "${{ secrets.REGISTRY_USERNAME }}"
          REGISTRY_PASSWORD: "${{ secrets.REGISTRY_PASSWORD }}"
        with:
          host: ${{ vars.EN_HOST }}
          username: ${{ vars.EN_HOST_USERNAME }}
          password: ${{ secrets.EN_HOST_PASSWORD }}
          script_stop: true
          envs: REGISTRY_USERNAME,REGISTRY_PASSWORD
          script: |
            echo $REGISTRY_PASSWORD | docker login univer-acr-registry.cn-shenzhen.cr.aliyuncs.com -u $REGISTRY_USERNAME --password-stdin

            docker pull univer-acr-registry.cn-shenzhen.cr.aliyuncs.com/univer/univer-examples:${{ github.event.client_payload.tag }}

            docker stop univer-examples

            docker rm univer-examples
            
            docker run -d --name univer-examples -p 13001:3010 univer-acr-registry.cn-shenzhen.cr.aliyuncs.com/univer/univer-examples:${{ github.event.client_payload.tag }}
      

