services:
  universer:
    restart: always
    image: univer-acr-registry.cn-shenzhen.cr.aliyuncs.com/${EDITION}/universer:${UNIVERSER_VERSION}
    expose:
      - 8000
      - 9000
    environment:
      - NO_PROXY=127.0.0.1,localhost,${DOCKER_NETWORK_SUBNET},univer-temporal,collaboration-server,univer-minio
      - SERVICE_NAME=Universer
      - SERVICE_VERSION=${UNIVERSER_VERSION}
    volumes:
      - ./configs:/data/configs
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/univers:/tmp/univers
      - ./logs/universer:/logs
    depends_on:
      univer-postgres:
        condition: service_started
      univer-rabbitmq:
        condition: service_started
      univer-temporal:
        condition: service_started
      univer-redis:
        condition: service_started
      init-db:
        condition: service_completed_successfully
    networks:
      - univer
    labels:
      - com.univer.app=universer
    deploy:
      replicas: 2
      endpoint_mode: dnsrr

  init-db:
    container_name: init-db
    image: univer-acr-registry.cn-shenzhen.cr.aliyuncs.com/release/universer-sql:${UNIVERSER_SQL_VERSION}
    environment:
      - HOST=${DATABASE_HOST}
      - PORT=${DATABASE_PORT}
      - USERNAME=${DATABASE_USERNAME}
      - PASSWORD=${DATABASE_PASSWORD}
      - DATABASE=${DATABASE_DBNAME}
      - NO_PROXY=127.0.0.1,localhost,${DOCKER_NETWORK_SUBNET},${DATABASE_HOST}
    networks:
      - univer
    depends_on:
      univer-postgres:
        condition: service_started
    labels:
      - com.univer.app=init-db

  lb:
    restart: always
    image: nginx:alpine-slim
    ports:
     - ${HOST_NGINX_PORT}:8000
    networks:
      - univer
    depends_on:
      - universer
    volumes:
      - ./nginx:/etc/nginx/conf.d/

  collaboration-server:
    restart: always
    container_name: collaboration-server
    image: univer-acr-registry.cn-shenzhen.cr.aliyuncs.com/release/univer-collaboration:${COLLABORATION_SERVER_VERSION}
    environment:
      - URL_OF_APPLY_SERVICE=0.0.0.0:5002
      - URL_OF_UNIVERSER_SERVICE=universer:8000
      - URL_OF_SNAPSHOT_SERVICE=universer:9000
      - SAVE_SHEET_SNAPSHOT_INTERVAL=50
      - SAVE_DOC_SNAPSHOT_INTERVAL=50
      - ENABLE_MUTATION_APPLY_INTERCEPTOR=true
      - no_proxy=127.0.0.1,localhost,${DOCKER_NETWORK_SUBNET},universer
    expose:
      - 5002
      - 9090
    networks:
      - univer
    labels:
      - com.univer.app=collaboration-server

  univer-postgres:
    image: postgres:${POSTGRES_VERSION}
    restart: always
    container_name: univer-postgres
    environment:
      - POSTGRES_USER=${DATABASE_USERNAME}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/
    expose:
      - 5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - univer
    labels:
      - com.univer.app=postgres

  univer-rabbitmq:
    restart: always
    container_name: univer-rabbitmq
    image: rabbitmq:${RABBITMQ_VERSION}
    expose:
      - 5672
      - 15672
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    networks:
      - univer
    labels:
      - com.univer.app=rabbitmq

  univer-redis:
    restart: always
    image: bitnami/redis:${REDIS_VERSION}
    container_name: univer-redis
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    expose:
      - 6379
    networks:
      - univer
    labels:
      - com.univer.app=redis
    volumes:
      - redis-data:/bitnami/redis/data

  univer-temporal:
    restart: always
    container_name: univer-temporal
    image: temporalio/auto-setup:${TEMPORAL_VERSION}
    environment:
      - DB=postgresql
      - POSTGRES_SEEDS=${DATABASE_HOST}
      - DB_PORT=${DATABASE_PORT}
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
      - POSTGRES_USER=${DATABASE_USERNAME}
      - POSTGRES_PWD=${DATABASE_PASSWORD}
      - TEMPORAL_CLI_SHOW_STACKS=1
      - NO_PROXY=127.0.0.1,localhost,${DOCKER_NETWORK_SUBNET}
    volumes:
      - ./temporal/dynamicconfig:/etc/temporal/config/dynamicconfig
      - ./logs/temporal:/logs
    expose:
      - 7233
    depends_on:
      - univer-postgres
    networks:
      - univer
    labels:
      - com.univer.app=temporal
  
  univer-minio:
    restart: always
    image: bitnami/minio:${MINIO_VERSION}
    user: root
    container_name: univer-minio
    environment:
      - MINIO_ROOT_USER=${S3_USER}
      - MINIO_ROOT_PASSWORD=${S3_PASSWORD}
      - MINIO_DEFAULT_BUCKETS=${S3_DEFAULT_BUCKET}
      - MINIO_DATA_DIR=/data
    ports:
      - ${HOST_MINIO_PORT}:9000
    expose:
      - 9000
    networks:
      - univer
    labels:
      - com.univer.app=minio
    volumes:
      - minio-data:/data

  univer-worker-exchange:
    restart: always
    container_name: univer-worker-exchange
    image: univer-acr-registry.cn-shenzhen.cr.aliyuncs.com/release/worker-exchange:${UNIVER_WORKER_EXCHANGE_VERSION}
    environment:
      - NO_PROXY=127.0.0.1,localhost,${DOCKER_NETWORK_SUBNET},univer-temporal,univer-minio,universer
      - TEMPORAL_SERVER=${TEMPORAL_HOST}:${TEMPORAL_PORT}
      - TEMPORAL_NAMESPACE=${TEMPORAL_NAMESPACE}
      - SERVICE_NAME=exchange-worker
      - SERVICE_VERSION=${UNIVER_WORKER_EXCHANGE_VERSION}
    depends_on:
      - univer-temporal
    networks:
      - univer
    labels:
      - com.univer.app=worker-exchange

  univer-loki:
    restart: always
    container_name: univer-loki
    image: grafana/loki:${LOKI_VERSION}
    expose:
      - 3100
    environment:
      - NO_PROXY=127.0.0.1,localhost,${DOCKER_NETWORK_SUBNET}
    command: -config.file=/etc/loki/config.yaml
    networks:
      - univer
    volumes:
      - ./loki/loki:/etc/loki:ro
      - loki-data:/loki
    labels:
      - com.univer.app=loki
    profiles:
      - observability

  univer-promtail:
    restart: always
    container_name: univer-promtail
    image: grafana/promtail:${PROMTAIL_VERSION}
    volumes:
      - ./loki/promtail:/etc/promtail:ro
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - NO_PROXY=127.0.0.1,localhost,${DOCKER_NETWORK_SUBNET},univer-loki
    command: -config.file=/etc/promtail/config.yml
    networks:
      - univer
    labels:
      - com.univer.app=promtail
    profiles:
      - observability

  univer-grafana:
    restart: always
    container_name: univer-grafana
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USERNAME}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - NO_PROXY=127.0.0.1,localhost,${DOCKER_NETWORK_SUBNET},univer-loki,univer-prometheus
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy
          orgId: 1
          url: http://univer-loki:3100
          basicAuth: false
          isDefault: false
          version: 1
          editable: false    
        - name: Prometheus
          type: prometheus
          access: proxy
          orgId: 1
          url: http://univer-prometheus:9090
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh
    image: grafana/grafana:${GRAFANA_VERSION}
    ports:
      - ${HOST_GRAFANA_PORT}:3000
    volumes:
      - ./loki/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
    networks:
      - univer
    labels:
      - com.univer.app=grafana
    profiles:
      - observability

  univer-prometheus:
    restart: always
    container_name: univer-prometheus
    image: bitnami/prometheus:${PROMETHEUS_VERSION}
    user: root
    expose:
      - 9090
    environment:
      - NO_PROXY=127.0.0.1,localhost,${DOCKER_NETWORK_SUBNET}
    networks:
      - univer
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
      - /var/run/docker.sock:/var/run/docker.sock:rw
    labels:
      - com.univer.app=prometheus
    profiles:
      - observability

  redis-exporter:
    image: oliver006/redis_exporter:${REDIS_EXPORTER_VERSION}
    expose:
      - 9121
    networks:
      - univer
    command:
      - "-redis.addr=redis://univer-redis:6379"
    depends_on:
      init-db:
        condition: service_completed_successfully
    profiles:
      - observability

  postgres-exporter:
    image: bitnami/postgres-exporter:${POSTGRES_EXPORTER_VERSION}
    expose:
      - 9187
    networks:
      - univer
    environment:
      DATA_SOURCE_NAME: "postgresql://${DATABASE_USERNAME}:${DATABASE_PASSWORD}@${DATABASE_HOST}:${DATABASE_PORT}/postgres?sslmode=disable"
    profiles:
      - observability

  rabbitmq-exporter:
    image: kbudde/rabbitmq-exporter:${RABBITMQ_EXPORTER_VERSION}
    expose:
      - 9419
    networks: 
      - univer
    environment:
      RABBIT_URL: http://${RABBITMQ_HOST}:${RABBITMQ_HTTPPORT}
      RABBIT_USER: ${RABBITMQ_USERNAME}
      RABBIT_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBIT_CAPABILITIES: compat
    depends_on:
      - univer-rabbitmq
    profiles:
      - observability

  univer-demo-ui:
    image: univer-acr-registry.cn-shenzhen.cr.aliyuncs.com/release/univer-collaboration-lite:${UNIVER_DEMO_UI_VERSION}
    container_name: univer-collaboration-demo-ui
    ports:
      - "3010:3010"
    volumes:
      - ./configs:/data/configs
    networks:
      - univer
    restart: "no"
    profiles:
      - demo-ui

networks:
  univer:
    name: univer-prod
    driver: bridge
    ipam:
     config:
       - subnet: ${DOCKER_NETWORK_SUBNET}

volumes:
  postgres-data:
    name: univer-prod-postgres-data
  redis-data:
    name: univer-prod-redis-data
  minio-data:
    name: univer-prod-minio-data
  loki-data:
    name: univer-prod-loki-data
  prometheus-data:
    name: univer-prod-prometheus-data

